<!--
  ~ Copyright LWJGL. All rights reserved.
  ~ License terms: https://www.lwjgl.org/license
  -->
<project name="native-windows" basedir="../.." xmlns:if="ant:if" xmlns:unless="ant:unless">
    <import file="../build-definitions.xml"/>

    <condition property="LIB_POSTFIX" value="" else="32">
        <equals arg1="${build.arch}" arg2="x64"/>
    </condition>

    <macrodef name="compile">
        <attribute name="dest"/>
        <attribute name="flags"/>
        <attribute name="relative" default="true"/>
        <element name="source" implicit="true"/>
        <sequential>
            <mkdir dir="@{dest}"/>
            <apply executable="cl" dest="@{dest}" skipemptyfilesets="true" failonerror="true" relative="@{relative}" parallel="true" taskname="Compiler">
                <arg line="/c @{flags} /EHsc /Ox /GF /Gy /GL /GR- /GS- /MT /MP /nologo /DNDEBUG /DLWJGL_WINDOWS /DLWJGL_${build.arch}"/>

                <arg value="/Fo@{dest}\"/>

                <arg value="/I${jni.headers}"/>
                <arg value="/I${jni.headers}\win32"/>

                <arg value="/I${src.native}\system"/>
                <arg value="/I${src.native}\system\windows"/>

                <source/>

                <regexpmapper from="(\w+)\.c(c|pp)?$" to="\1.obj"/>
            </apply>
        </sequential>
    </macrodef>

    <macrodef name="build">
        <attribute name="name"/>
        <attribute name="dest"/>
        <attribute name="flags" default="/Wall /WX"/>
        <element name="beforeCompile" optional="true"/>
        <element name="compileargs" optional="true"/>
        <element name="source"/>
        <element name="beforeLink" optional="true"/>
        <element name="link" optional="true"/>
        <element name="linkargs" optional="true"/>
        <sequential>
            <beforeCompile/>
            <compile dest="@{dest}" flags="@{flags}">
                <compileargs/>
                <source/>
            </compile>

            <local name="lib-uptodate"/>
            <uptodate property="lib-uptodate" targetfile="${lib}/@{name}${LIB_POSTFIX}.dll">
                <srcfiles file="config/${platform}/build.xml"/>
                <srcfiles dir="@{dest}" includes="**"/>
            </uptodate>

            <!--
                x86: Generate DEF file to drop __stdcall decorations from JavaCritical
                functions. This is required because of a bug (wrong args_size) in
                hotspot/src/share/vm/prims/nativeLookup.cpp#lookup_critical_entry.
             -->
            <local name="undecorate"/>
            <condition property="undecorate" value="true">
                <and>
                    <not><isset property="lib-uptodate"/></not>
                    <equals arg1="${build.arch}" arg2="x86"/>
                </and>
            </condition>
            <concat destfile="${bin.native}/build/@{name}${LIB_POSTFIX}.def" if:set="undecorate">
                <header filtering="no">LIBRARY    @{name}${LIB_POSTFIX}.dll
EXPORTS
</header>
                <!-- For each source file -->
                <source/>
                <filterchain>
                    <!-- For each line with a JNICALL -->
                    <linecontainsregexp>
                        <regexp pattern="JNICALL\s+JavaCritical_\p{javaJavaIdentifierPart}+?[(]"/>
                    </linecontainsregexp>
                    <!-- Append the function name -->
                    <replaceregex pattern="^.*?JNICALL\s+(.+?)[(].+$" replace="    \1"/>
                </filterchain>
            </concat>

            <beforeLink/>
            <apply executable="cl" failonerror="true" parallel="true" taskname="Linker" unless:set="lib-uptodate">
                <arg line='/LD /WX /nologo /Fe:"${bin.native}\build\@{name}${LIB_POSTFIX}.dll"'/>

                <fileset dir="@{dest}" includes="*.obj"/>
                <link/>

                <srcfile/>
                <arg value="/link"/>
                <arg value="/OPT:REF,ICF"/>
                <arg value="/DLL"/>
                <arg value="/LTCG"/>
                <arg value="/DEF:${bin.native}\build\@{name}${LIB_POSTFIX}.def" if:set="undecorate"/>

                <linkargs/>
            </apply>

            <move file="${bin.native}/build/@{name}${LIB_POSTFIX}.dll" todir="${lib}" unless:set="lib-uptodate"/>
            <delete file="${lib}/touch_windows_${build.arch}.txt" quiet="true" unless:set="lib-uptodate"/>
        </sequential>
    </macrodef>

    <target name="compile-native-platform">
        <mkdir dir="${bin.native}/build"/>

        <parallel threadsPerProcessor="1" failonany="true">

        <!-- CORE -->
        <build name="lwjgl" dest="${bin.native}/core">
            <compileargs>
                <arg value="/I${src.native}\system\dyncall"/>
            </compileargs>
            <source>
                <fileset dir=".">
                    <include name="${src.native}/system/*.c"/>
                    <exclude name="${src.native}/system/lwjgl_malloc.c"/>
                    <include name="${src.generated.native}/system/*.c"/>
                    <include name="${src.generated.native}/system/dyncall/*.c"/>
                    <include name="${src.generated.native}/system/jawt/*.c" if:true="${binding.jawt}"/>
                    <include name="${src.generated.native}/system/jni/*.c"/>
                    <include name="${src.generated.native}/system/libc/*.c"/>
                    <include name="${src.generated.native}/system/windows/*.c"/>
                </fileset>
            </source>
            <beforeLink>
                <mkdir dir="${lib}/windows/${build.arch}"/>
                <parallel threadsPerProcessor="2" failonany="true" unless:set="lib-uptodate">
                    <update-dependency name="dyncall" artifact="${build.arch}/dyncall_s.lib"/>
                    <update-dependency name="dyncallback" artifact="${build.arch}/dyncallback_s.lib"/>
                    <update-dependency name="dynload" artifact="${build.arch}/dynload_s.lib"/>
                </parallel>
            </beforeLink>
            <link>
                <fileset dir="${lib}/windows/${build.arch}/">
                    <include name="dyn*.lib"/>
                </fileset>
            </link>
        </build>

        <!-- LMDB -->
        <build name="lwjgl_lmdb" dest="${bin.native}/lmdb" if:true="${binding.lmdb}">
            <beforeCompile>
                <compile dest="@{dest}" flags="/W0">
                    <arg value="/I${src.native}\util\lmdb"/>
                    <fileset dir="." includes="${src.native}/util/lmdb/*.c"/>
                </compile>
            </beforeCompile>
            <compileargs>
                <arg value="/I${src.native}\util\lmdb"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated.native}/util/lmdb/*.c"/>
            </source>
            <linkargs>
                <arg value="ntdll.lib"/>
                <arg value="Advapi32.lib"/>
            </linkargs>
        </build>

        <!-- NanoVG -->
        <build name="lwjgl_nanovg" dest="${bin.native}/nanovg" if:true="${binding.nanovg}">
            <compileargs>
                <arg value="/I${src.native}\nanovg"/>
                <arg value="/I${src.native}\stb"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
                <fileset dir="." includes="${src.generated.native}/nanovg/*.c"/>
            </source>
        </build>

        <!-- NativeFileDialog -->
        <build name="lwjgl_nfd" dest="${bin.native}/nfd" if:true="${binding.nfd}">
            <beforeCompile>
                <compile dest="@{dest}" flags="">
                    <arg value="/I${src.native}\util\nfd"/>
                    <arg value="/I${src.native}\util\nfd\include"/>
                    <fileset dir="." includes="${src.native}/util/nfd/nfd_common.c"/>
                    <fileset dir="." includes="${src.native}/util/nfd/nfd_win.cpp"/>
                </compile>
            </beforeCompile>
            <compileargs>
                <arg value="/I${src.native}\util\nfd"/>
                <arg value="/I${src.native}\util\nfd\include"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
                <fileset dir="." includes="${src.generated.native}/util/nfd/*.c"/>
            </source>
            <linkargs>
                <arg value="Ole32.lib"/>
                <arg value="Shell32.lib"/>
            </linkargs>
        </build>

        <!-- Nuklear -->
        <build name="lwjgl_nuklear" dest="${bin.native}/nuklear" if:true="${binding.nuklear}">
            <compileargs>
                <arg value="/I${src.native}\nuklear"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated.native}/nuklear/*.c"/>
            </source>
        </build>

        <!-- LibOVR -->
        <build name="lwjgl_ovr" dest="${bin.native}/ovr" if:true="${binding.ovr}">
            <beforeCompile>
                <compile dest="@{dest}" flags="" relative="false">
                    <arg value="/I${OCULUS_SDK_PATH}\LibOVR\Include"/>
                    <fileset dir="${OCULUS_SDK_PATH}/LibOVR/Src" includes="*.cpp"/>
                </compile>
            </beforeCompile>
            <compileargs>
                <arg value="/I${OCULUS_SDK_PATH}\LibOVR\Include"/>
                <arg value="/I${OCULUS_SDK_PATH}\LibOVR\Src"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated.native}/ovr/*.c"/>
            </source>
        </build>

        <!-- OpenGL -->
        <build name="lwjgl_opengl" dest="${bin.native}/opengl" if:true="${binding.opengl}">
            <compileargs>
                <arg value="/I${src.native}\opengl"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated.native}/opengl/*.c"/>
            </source>
        </build>

        <!-- OpenGL ES -->
        <build name="lwjgl_opengles" dest="${bin.native}/opengles" if:true="${binding.opengles}">
            <compileargs>
                <arg value="/I${src.native}\opengles"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated.native}/opengles/*.c"/>
            </source>
        </build>

        <!-- OpenVR -->
        <build name="lwjgl_openvr" dest="${bin.native}/openvr" if:true="${binding.openvr}">
            <source>
                <fileset dir="." includes="${src.generated.native}/openvr/*.c"/>
            </source>
        </build>

        <!-- ParShapes -->
        <build name="lwjgl_par" dest="${bin.native}/par" if:true="${binding.par}">
            <compileargs>
                <arg value="/I${src.native}\util\par"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
                <fileset dir="." includes="${src.generated.native}/util/par/*.c"/>
            </source>
        </build>

        <!-- rpmalloc -->
        <build name="lwjgl_rpmalloc" dest="${bin.native}/rpmalloc" if:true="${binding.rpmalloc}">
            <compileargs>
                <arg value="/I${src.native}\system\rpmalloc"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated.native}/system/rpmalloc/*.c"/>
            </source>
        </build>

        <!-- SSE -->
        <build name="lwjgl_sse" dest="${bin.native}/sse" if:true="${binding.sse}">
            <compileargs>
                <arg value="/I${src.native}\util"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated.native}/util/simd/*.c"/>
            </source>
        </build>

        <!-- stb -->
        <build name="lwjgl_stb" dest="${bin.native}/stb" if:true="${binding.stb}">
            <compileargs>
                <arg value="/I${src.native}\stb"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
                <fileset dir="." includes="${src.generated.native}/stb/*.c"/>
            </source>
        </build>

        <!-- tinyexr -->
        <build name="lwjgl_tinyexr" dest="${bin.native}/tinyexr" if:true="${binding.tinyexr}">
            <beforeCompile>
                <compile dest="@{dest}" flags="">
                    <arg value="/I${src.native}\util\tinyexr"/>
                    <fileset dir="." includes="${src.native}/util/tinyexr/*.cc"/>
                </compile>
            </beforeCompile>
            <compileargs>
                <arg value="/I${src.native}\util\tinyexr"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated.native}/util/tinyexr/*.c"/>
            </source>
        </build>

        <!-- tiny file dialogs -->
        <build name="lwjgl_tinyfd" dest="${bin.native}/tinyfd" if:true="${binding.tinyfd}">
            <beforeCompile>
                <compile dest="@{dest}" flags="">
                    <arg value="/I${src.native}\util\tinyfd"/>
                    <fileset dir="." includes="${src.native}/util/tinyfd/*.c"/>
                </compile>
            </beforeCompile>
            <compileargs>
                <arg value="/I${src.native}\util\tinyfd"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated.native}/util/tinyfd/*.c"/>
            </source>
            <linkargs>
                <arg value="Comdlg32.lib"/>
                <arg value="Ole32.lib"/>
                <arg value="Shell32.lib"/>
                <arg value="User32.lib"/>
            </linkargs>
        </build>

        <!-- xxHash -->
        <build name="lwjgl_xxhash" dest="${bin.native}/xxhash" if:true="${binding.xxhash}">
            <compileargs>
                <arg value="/I${src.native}\system"/>
                <arg value="/I${src.native}\util\xxhash"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
                <fileset dir="." includes="${src.generated.native}/util/xxhash/*.c"/>
            </source>
        </build>

        <!-- yoga -->
        <build name="lwjgl_yoga" dest="${bin.native}/yoga" if:true="${binding.yoga}">
            <beforeCompile>
                <compile dest="@{dest}" flags="">
                    <arg value="/I${src.native}\util\yoga"/>
                    <fileset dir="." includes="${src.native}/util/yoga/*.c"/>
                </compile>
            </beforeCompile>
            <compileargs>
                <arg value="/I${src.native}\util\yoga"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated.native}/util/yoga/*.c"/>
            </source>
        </build>

        </parallel>

        <local name="native-dependencies-uptodate"/>
        <condition property="native-dependencies-uptodate" value="true">
            <or>
                <istrue value="${build.offline}"/>
                <resourceexists>
                    <file file="${lib}/touch_windows_${build.arch}.txt"/>
                </resourceexists>
            </or>
        </condition>

        <sequential unless:set="native-dependencies-uptodate">
            <mkdir dir="${lib}/windows/${build.arch}"/>

            <parallel threadsPerProcessor="4" failonany="true">

            <update-dependency name="Assimp" artifact="${build.arch}/assimp${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.assimp}"/>
            <update-dependency name="bgfx" artifact="${build.arch}/bgfx${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.bgfx}"/>
            <update-dependency name="jemalloc" artifact="${build.arch}/jemalloc${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.jemalloc}"/>
            <update-dependency name="GLFW" artifact="${build.arch}/glfw${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.glfw}"/>
            <update-dependency name="OpenAL32" artifact="${build.arch}/OpenAL${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.openal}"/>
            <update-dependency name="OpenVR" artifact="${build.arch}/openvr_api${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.openvr}"/>

            </parallel>

            <touch file="${lib}/touch_windows_${build.arch}.txt" verbose="false"/>
        </sequential>
    </target>
</project>