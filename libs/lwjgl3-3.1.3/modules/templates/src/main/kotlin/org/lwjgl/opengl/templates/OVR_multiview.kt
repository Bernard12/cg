/*
 * Copyright LWJGL. All rights reserved.
 * License terms: https://www.lwjgl.org/license
 */
package org.lwjgl.opengl.templates

import org.lwjgl.generator.*
import org.lwjgl.opengl.*

val OVR_multiview = "OVRMultiview".nativeClassGL("OVR_multiview", postfix = OVR) {
    documentation =
        """
        Native bindings to the $registryLink extension.

        The method of stereo rendering supported in OpenGL is currently achieved by rendering to the two eye buffers sequentially. This typically incurs double
        the application and driver overhead, despite the fact that the command streams and render states are almost identical.

        This extension seeks to address the inefficiency of sequential multiview rendering by adding a means to render to multiple elements of a 2D texture
        array simultaneously. In multiview rendering, draw calls are instanced into each corresponding element of the texture array. The vertex program uses a
        new ViewID variable to compute per-view values, typically the vertex position and view-dependent variables like reflection.

        The formulation of this extension is high level in order to allow implementation freedom. On existing hardware, applications and drivers can realize
        the benefits of a single scene traversal, even if all GPU work is fully duplicated per-view. But future support could enable simultaneous rendering via
        multi-GPU, tile-based architectures could sort geometry into tiles for multiple views in a single pass, and the implementation could even choose to
        interleave at the fragment level for better texture cache utilization and more coherent fragment shader branching.

        The most obvious use case in this model is to support two simultaneous views: one view for each eye. However, we also anticipate a usage where two
        views are rendered per eye, where one has a wide field of view and the other has a narrow one. The nature of wide field of view planar projection is
        that the sample density can become unacceptably low in the view direction. By rendering two inset eye views per eye, we can get the required sample
        density in the center of projection without wasting samples, memory, and time by oversampling in the periphery.

        Requires ${GL30.core}.
        """

    IntConstant(
        "Accepted by the {@code pname} parameter of GetFramebufferAttachmentParameteriv.",

        "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR"..0x9630,
        "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR"..0x9632
    )

    IntConstant(
        "Accepted by the {@code pname} parameter of GetIntegerv.",

        "MAX_VIEWS_OVR"..0x9631
    )

    IntConstant(
        "Returned by CheckFramebufferStatus.",

        "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR"..0x9633
    )

    val FramebufferTextureLayer = GL30["FramebufferTextureLayer"]

    void(
        "FramebufferTextureMultiviewOVR",
        """
        Operates similarly to #FramebufferTextureLayer(), except that {@code baseViewIndex} and {@code numViews} selects a range of texture array elements
        that will be targeted when rendering.

        The command
        ${codeBlock("""
View( uint id );""")}
        does not exist in the GL, but is used here to describe the multi-view functionality in this section. The effect of this hypothetical function is to set
        the value of the shader built-in input uint {@code gl_ViewID_OVR}.

        When multi-view rendering is enabled, drawing commands have the same effect as:
        ${codeBlock("""
for( int i = 0; i < numViews; i++ ) {
    FramebufferTextureLayer( target, attachment, texture, level, baseViewIndex + i );
    View( i );
    &lt;drawing-command&gt;
}""")}
        The result is that every drawing command is broadcast into every active view. The shader uses {@code gl_ViewID_OVR} to compute view dependent outputs.

        The number of views, as specified by {@code numViews}, must be the same for all framebuffer attachments points where the value of
        #FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE is not #NONE or the framebuffer is incomplete.

        In this mode there are several restrictions:
        ${ul(
            "in vertex shader {@code gl_Position} is the only output that can depend on {@code ViewID}",
            "no transform feedback",
            "no tessellation control or evaluation shaders",
            "no geometry shader",
            "no timer query",
            "occlusion query results must be between max and sum of per-view queries, inclusive"
        )}

        <h5>Errors</h5>

        $INVALID_OPERATION is generated by FramebufferTextureMultiviewOVR if target is #READ_FRAMEBUFFER.

        $INVALID_VALUE is generated by FramebufferTextureMultiviewOVR if {@code numViews} is less than 1, if {@code numViews} is more than #MAX_VIEWS_OVR or if
        {@code (baseViewIndex + numViews)} exceeds #MAX_ARRAY_TEXTURE_LAYERS.

        $INVALID_OPERATION is generated if a rendering command is issued and the number of views in the current draw framebuffer is not equal to the number
        of views declared in the currently bound program.
        """,

        FramebufferTextureLayer["target"],
        FramebufferTextureLayer["attachment"],
        FramebufferTextureLayer["texture"],
        FramebufferTextureLayer["level"],
        GLint.IN("baseViewIndex", "the base framebuffer texture layer index"),
        GLsizei.IN("numViews", "the number of views to target when rendering")
    )
}
